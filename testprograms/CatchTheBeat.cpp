#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class CatchTheBeat {
public:
	int maxCatched(int n, int x0, int y0, int a, int b, int c, int d, int mod1, int mod2, int offset);
};

struct node
{
	int x, y;
	
	node() {}
	node(int _x, int _y) : x(_x), y(_y) {}
	int operator < (const node &o) const
	{
		return (y < o.y) || (y == o.y && x < o.x);
	}
};

int x[1010100], y[1010100];
int f[1010100], C[1010100];

vector<node> r;
int total;

void ins(int x, int v)
{
	for (int i = x; i <= total; i += ((i) & (-i)))
			C[i] = max(C[i], v);
}

int ask(int x)
{
	int ans = -1000000;
	for (int i = x; i; i -= ((i) & (-i)))
		ans = max(ans, C[i]);
	return ans;
}
	
int CatchTheBeat::maxCatched(int n, int x0, int y0, int a, int b, int c, int d, int mod1, int mod2, int offset) 
{
	x[0] = x0;
	for (int i = 1; i < n; i ++)
		x[i] = (int) (((LL) x[i - 1] * (LL) a + (LL) b) % (LL) mod1);
	for (int i = 0; i < n; i ++)
		x[i] -= offset;
	
	y[0] = y0;
	for (int i = 1; i < n; i ++)
		y[i] = (int) (((LL) y[i - 1] * (LL) c + (LL) d) % (LL) mod2);
	
	r.clear();
	r.push_back(node(0, 0));
	map<int, int> MM; MM.clear();
	
	for (int i = 0; i < n; i ++)
	{
		if (x[i] + y[i] < 0 || -x[i] + y[i] < 0)
			continue;
		r.push_back(node(x[i] + y[i], -x[i] + y[i]));
		MM[x[i] + y[i]] = 0;
	}
	
	total = 0; MM[0] = 0;
	for (map<int, int>::iterator it = MM.begin(); it != MM.end(); it ++)
		it->second = ++ total; 
	sort(r.begin(), r.end());
	//dp
	int ans = 0;
	f[0] = 0;
	
	for (int i = 1; i <= total; i ++)
		C[i] = -1000000;
	
	ins(MM[0], 0);
	
	for (int i = 1; i < r.size(); i ++)
	{
		f[i] = ask(MM[r[i].x]) + 1;
		ans = max(ans, f[i]);
		ins(MM[r[i].x], f[i]);
	}
	
	return ans;
}
		







// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, bool hasAnswer, int p10) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5 << "," << p6 << "," << p7 << "," << p8 << "," << p9;
	cout << "]" << endl;
	CatchTheBeat *obj;
	int answer;
	obj = new CatchTheBeat();
	clock_t startTime = clock();
	answer = obj->maxCatched(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p10 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p10;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;
	int p7;
	int p8;
	int p9;
	int p10;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 0;
	p2 = 0;
	p3 = 1;
	p4 = 1;
	p5 = 1;
	p6 = 1;
	p7 = 100;
	p8 = 100;
	p9 = 1;
	p10 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, true, p10) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 0;
	p2 = 1234;
	p3 = 0;
	p4 = 0;
	p5 = 0;
	p6 = 0;
	p7 = 1000000000;
	p8 = 1000000000;
	p9 = 1000;
	p10 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, true, p10) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 0;
	p2 = 999;
	p3 = 0;
	p4 = 0;
	p5 = 0;
	p6 = 0;
	p7 = 1000000000;
	p8 = 1000000000;
	p9 = 1000;
	p10 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, true, p10) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 100;
	p1 = 0;
	p2 = 0;
	p3 = 1;
	p4 = 1;
	p5 = 1;
	p6 = 1;
	p7 = 3;
	p8 = 58585858;
	p9 = 1;
	p10 = 66;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, true, p10) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 500000;
	p1 = 123456;
	p2 = 0;
	p3 = 1;
	p4 = 0;
	p5 = 1;
	p6 = 1;
	p7 = 1000000000;
	p8 = 1000000000;
	p9 = 0;
	p10 = 376544;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, true, p10) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 500000;
	p1 = 0;
	p2 = 0;
	p3 = 0;
	p4 = 0;
	p5 = 0;
	p6 = 0;
	p7 = 1;
	p8 = 1;
	p9 = 0;
	p10 = 500000;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, true, p10) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 10;
	p1 = 999999957;
	p2 = 79;
	p3 = 993948167;
	p4 = 24597383;
	p5 = 212151897;
	p6 = 999940854;
	p7 = 999999986;
	p8 = 999940855;
	p9 = 3404;
	p10 = 3;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, true, p10) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
