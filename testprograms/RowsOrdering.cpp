#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;

vector<int> getSplitNumbers(string s)
{
	for (int i = 0; i < s.size(); i ++)
		if (! isdigit(s[i])) s[i] = ' ';
	vector<int> ans;
	ans.clear();
	if (! s.size()) return ans;
	for ( ; ; )
	{
		int j = s.find(" ");
		if (j == string::npos)
		{
			ans.push_back(atoi(s.c_str()));
			return ans;
		}
		int x;
		sscanf(s.c_str(), "%d", &x);
		ans.push_back(x);
		s.erase(0, j + 1);
	}
	return ans;
}
	
class RowsOrdering {
public:
	int order(vector <string> rows);
};

const int base = 1000000007;
int a[100][100], b[100][100];
int Pow[100], s[100];

int RowsOrdering::order(vector <string> rows) 
{
	int N = rows.size(), M = rows[0].size();
	for (int i = 0; i < N; i ++)
		for (int j = 0; j < M; j ++)
			if (rows[i][j] >= 'a') a[i][j] = rows[i][j] - 96; else a[i][j] = rows[i][j] - 64 + 26;
	for (int col = 0; col < M; col ++)
	{
		map<char, int> M; M.clear();
		for (int i = 0; i < N; i ++)
			M[rows[i][col]] ++;
		vector<pair<int, char> > tmp; tmp.clear();
		for (map<char, int>::iterator i = M.begin(); i != M.end(); i ++)
			tmp.push_back(make_pair(-(i->second), i->first));
		sort(tmp.begin(), tmp.end());
		M.clear();
		s[col] = 0;
		for (int i = 0; i < tmp.size(); i ++)
		{
			M[tmp[i].second] = i;
			s[col] += -tmp[i].first * i;
		}	
		for (int i = 0; i < N; i ++)
			a[i][col] = M[rows[i][col]];
	}
	//
	vector<pair<int, int> > tmp; tmp.clear();
	for (int i = 0; i < M; i ++)
		tmp.push_back(make_pair(s[i], i));
	sort(tmp.begin(), tmp.end());
	
	//go
	for (int i = 0; i < N; i ++)
		for (int col = 0; col < M; col ++)
			b[i][col] = a[i][tmp[col].second];
	Pow[0] = 1;
	for (int i = 1; i <= 60; i ++)
		Pow[i] = (int) ((LL) Pow[i - 1] * 50LL % (LL) base);
		
	int ans = 0;
	for (int i = 0; i < N; i ++)
		for (int j = 0; j < M; j ++)
		{
			ans += (int) ((LL) b[i][j] * (LL) Pow[M - j - 1] % (LL) base);
			ans %= base;
		}
	return (ans + N) % base;
}





// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	RowsOrdering *obj;
	int answer;
	obj = new RowsOrdering();
	clock_t startTime = clock();
	answer = obj->order(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"bb","cb","ca"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 54;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"abcd","ABCD"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 127553;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"Example","Problem"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 943877448;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"a","b","c","d","e","f","g"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 28;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"a","a"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
