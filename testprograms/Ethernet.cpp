#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class Ethernet {
public:
	int connect(vector <int> parent, vector <int> dist, int maxDist);
};

int inf = 10000000;

int lenLimit;
int n;
vector<pair<int, int> > ch[100];

int f[100][1000];
int g[100][1000];

void dp(int x)
{
	if (ch[x].size() == 0)
	{
		f[x][0] = 1;
		for (int i = 1; i <= lenLimit; i ++)
			f[x][i] = inf;
		return ;
	}
	
	int totCh = (int) ch[x].size();
	for (int i = 0; i < totCh; i ++)
		dp(ch[x][i].first);
	
	//second dp
	for (int i = 0; i <= totCh; i ++)
		for (int j = 0; j <= lenLimit; j ++)
			g[i][j] = inf;
	g[0][0] = 0;
	for (int i = 0; i < totCh; i ++)
		for (int j = 0; j <= lenLimit; j ++)
			if (g[i][j] < inf)
			{
				//next
				int curCh = ch[x][i].first;
				int curDist = ch[x][i].second;
				
				//link with x
				for (int k = 0; k <= lenLimit; k ++)
					if (f[curCh][k] < inf && j + k + curDist <= lenLimit)
						g[i + 1][max(j, k + curDist)] = min(g[i + 1][max(j, k + curDist)], g[i][j] + f[curCh][k] - 1);
				
				//not link with x
				for (int k = 0; k <= lenLimit; k ++)
					g[i + 1][j] = min(g[i + 1][j], g[i][j] + f[curCh][k]);
			}
	for (int i = 0; i <= lenLimit; i ++)
		f[x][i] = g[totCh][i] + 1;
}
			
int Ethernet::connect(vector <int> parent, vector <int> dist, int maxDist) 
{
	n = parent.size() + 1;
	lenLimit = maxDist;
	
	for (int i = 0; i < n; i ++)
		ch[i].clear();
	for (int i = 0; i < parent.size(); i ++)
	{
		int curChild = i + 1;
		int curParent = parent[i];
		int curDist = dist[i];
		
		ch[curParent].push_back(make_pair(curChild, curDist));
	}
	
	//dp
	dp(0);
	
	int ans = inf;
	for (int i = 0; i <= maxDist; i ++)
		ans = min(ans, f[0][i]);
	return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	Ethernet *obj;
	int answer;
	obj = new Ethernet();
	clock_t startTime = clock();
	answer = obj->connect(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,0,0,0,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4,5,6,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 8;
	p3 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,1,2,3,4,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4,5,6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	p3 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,0,0,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1,1,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {0,1,0,3,0,5,0,6,0,6,0,6,4,6,9,4,5,5,2,5,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {93,42,104,105,59,73,161,130,30,81,62,93,131,133,139,5,13,34,25,111,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 162;
	p3 = 11;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
