#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class RandomGCD {
public:
	int countTuples(int N, int K, int low, int high);
};

const int base = 1000000000 + 7;
int numd[101010];

int powd(int a, int b)
{
	if (b == 0) return 1;
	if (b == 1)
		return a % base;
	int x = powd(a, b / 2);
	x = (int) (((LL) x * (LL) x) % (LL) base);
	if (b % 2 == 1)
		x = (int) (((LL) x * (LL) a) % (LL) base);
	return x;
}
	
int RandomGCD::countTuples(int N, int K, int low, int high) 
{
	memset(numd, 0, sizeof(numd));
	for (int i = 2; i <= 100000; i ++)
	{
		numd[i] --;
		for (int j = i + i; j <= 100000; j += i)
			numd[j] -= numd[i];
	}
	
	low = low / K + (low % K ? 1 : 0);
	high /= K;
	
	cout << low << " " << high << endl;
	//
	int ans = powd(high - low + 1, N);
	for (int gcd = 2; gcd <= 100000; gcd ++)
	{
		int lo = low / gcd;
		if (low % gcd) lo ++;
		int hi = high / gcd;
		
		if (lo > hi) continue;
		int v = powd(hi - lo + 1, N) - (hi - lo + 1);
		v += base, v %= base;
		v = (int) (((LL) v * (LL) numd[gcd]) % (LL) base);
		v += base;
		v %= base;
		ans += v, ans %= base;
	}
	cout << ans << endl;
	if (high > 1)
	{
		ans -= high - max(low, 2) + 1;
		ans += base;
		ans %= base;
	}
	return ans;
}
	
	
	







// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	RandomGCD *obj;
	int answer;
	obj = new RandomGCD();
	clock_t startTime = clock();
	answer = obj->countTuples(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 2;
	p3 = 4;
	p4 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 100;
	p2 = 2;
	p3 = 4;
	p4 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 5;
	p2 = 5;
	p3 = 5;
	p4 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 73824;
	p1 = 17347;
	p2 = 9293482;
	p3 = 9313482;
	p4 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 222;
	p1 = 222;
	p2 = 222;
	p3 = 22222;
	p4 = 339886855;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
