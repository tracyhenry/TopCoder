#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class ClosestRabbit {
public:
	double getExpected(vector <string> board, int r);
};

double C(int n, int k)
{
	double ans = 1.0;
	for (int i = 1; i <= k; i ++)
		ans = ans * (n - i + 1) / i;
	return ans;
}
	
int smaller(int x, int y, int i, int j, int p, int q)
{
	int d1 = sqr(x - i) + sqr(y - j);
	int d2 = sqr(p - i) + sqr(q - j);
	if (d1 < d2) return 1;
	if (d1 > d2) return 0;
	if (x < p) return 1;
	if (x > p) return 0;
	if (y < q) return 1;
	if (y > q) return 0;
	return 0;
}
	
double ClosestRabbit::getExpected(vector <string> board, int r) 
{
	double ans = 0;
	int n = board.size();
	int m = board[0].size();
	int empty = 0;
	
	for (int i = 0; i < n; i ++)
		for (int j = 0; j < m; j ++)
			if (board[i][j] == '.')
				empty ++;
	
	for (int i = 0; i < n; i ++)
		for (int j = 0; j < m; j ++)
			if (board[i][j] == '.')
				for (int p = 0; p < n; p ++)
					for (int q = 0; q < m; q ++)
						if (board[p][q] == '.')
						{
							if (p < i || p == i && q <= j)
								continue;
							int avail = 0;
							for (int x = 0; x < n; x ++)
								for (int y = 0; y < m; y ++)
									if (board[x][y] == '.' && (x != i || y != j) && (x != p || y != q))
									{
										if (smaller(x, y, i, j, p, q))
											continue;
										if (smaller(x, y, p, q, i, j))
											continue;
										avail ++;
									}
							if (avail + 2 < r)
								continue;
							
							ans += C(avail, r - 2) / C(empty, r);
						}
	return ans;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	ClosestRabbit *obj;
	double answer;
	obj = new ClosestRabbit();
	clock_t startTime = clock();
	answer = obj->getExpected(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	double p2;
	
	{
	// ----- test 0 -----
	string t0[] = {".#.#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 1.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"..###.",".###.#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 1.6;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"..###.",".###.#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 2.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {".....","#...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 1.253968253968254;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".#####.#####..#....#","#......#....#.##..##",".####..#####..#.##.#",".....#.#...#..#....#","#####..#....#.#....#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 19;
	p2 = 5.77311527122319;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
