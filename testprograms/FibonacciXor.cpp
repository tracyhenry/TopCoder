#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class FibonacciXor {
public:
	int find(long long A, long long B);
};

LL mod[100];

int work(LL x, LL y)
{
	
	vector<LL> Fibs; Fibs.clear();
	Fibs.push_back(1);
	Fibs.push_back(2);
	for ( ; ; )
	{
		if (Fibs[Fibs.size() - 1] >= y)
			break;
		Fibs.push_back(Fibs[Fibs.size() - 1] + Fibs[Fibs.size() - 2]);
	}
	
	vector<pair<LL, pair<LL, LL> > > segments; segments.clear();
	segments.push_back(make_pair(1, make_pair(x, y)));
	
	//mod
	mod[0] = 1;
	for (int i = 1; i <= 80; i ++)
		mod[i] = mod[i - 1] * 2LL % 1000000007LL;
	LL ans = 0;
	for (int i = Fibs.size() - 1; i >= 0; i --)
	{
		vector<pair<LL, pair<LL, LL> > > tmp(segments.begin(), segments.end());
		map<pair<LL, LL>, LL> M; M.clear();
		
		LL cur = Fibs[i], tot = 0;
		
		for (int j = 0; j < tmp.size(); j ++)
			if (cur > tmp[j].second.second)
				M[tmp[j].second] += tmp[j].first;
			else
			{
				LL lo = tmp[j].second.first, hi = tmp[j].second.second;
				//[lo, cur - 1]
				if (lo <= cur - 1)
					M[make_pair(lo, cur - 1)] += tmp[j].first;
				
				//[cur + 1, hi]
				if (cur + 1 <= hi)
					M[make_pair(1, hi - cur)] += tmp[j].first;
				tot += (hi - cur + 1) % 2LL * tmp[j].first;
			}
		
		if (tot % 2LL)
			ans += mod[i], ans %= 1000000007LL;
		
		segments.clear();
		for (map<pair<LL, LL>, LL>::iterator it = M.begin(); it != M.end(); it ++)
			segments.push_back(make_pair(it->second, it->first));
		
		cout << "----------" << i << "----------" << endl;
		for (int i = 0; i < segments.size(); i ++)
			cout << segments[i].first << " " << segments[i].second.first << " " << segments[i].second.second << endl;
		cout << endl; 
	}
	return ans;
}				
				
int FibonacciXor::find(long long A, long long B) 
{
	return (int) (work(A, B));
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	FibonacciXor *obj;
	int answer;
	obj = new FibonacciXor();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 1ll;
	p1 = 2ll;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3ll;
	p1 = 10ll;
	p2 = 25;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1ll;
	p1 = 1000000000000000ll;
	p2 = 780431495;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
