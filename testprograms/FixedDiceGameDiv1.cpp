#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <string>
#include <cstring>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class FixedDiceGameDiv1 {
public:
	double getExpectation(int a, int b, int c, int d);
};

double f[60][3000], g[60][3000];

double FixedDiceGameDiv1::getExpectation(int a, int b, int c, int d) 
{
	if (a * b <= c)
		return -1.0;

	memset(f, 0, sizeof(f));
	memset(g, 0, sizeof(g));
	
	f[0][0] = 1.0;
	for (int i = 0; i < a; i ++)
		for (int j = 0; j <= i * b; j ++)
		{
//			if (fabs(f[i][j]) <= 1e-8) continue;
			//next
			for (int next = 1; next <= b; next ++)
				f[i + 1][j + next] += f[i][j] / b;
		}
	
	g[0][0] = 1.0;
	for (int i = 0; i < c; i ++)
		for (int j = 0; j <= c * d; j ++)
		{
//			if (fabs(g[i][j]) <= 1e-8) continue;
			//next
			for (int next = 1; next <= d; next ++)
				g[i + 1][j + next] += g[i][j] / d;
		}
	
	double tot = 0;
	for (int s1 = 1; s1 <= a * b; s1 ++)
		for (int s2 = 1; s2 < s1 && s2 <= c * d; s2 ++)
			tot += f[a][s1] * g[c][s2];
	double ans = 0;
	for (int s1 = 1; s1 <= a * b; s1 ++)
		for (int s2 = 1; s2 < s1 && s2 <= c * d; s2 ++)
			ans += f[a][s1] * g[c][s2] / tot * s1;
	return ans;
}
	
			
			


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	FixedDiceGameDiv1 *obj;
	double answer;
	obj = new FixedDiceGameDiv1();
	clock_t startTime = clock();
	answer = obj->getExpectation(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	double p4;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 2;
	p2 = 1;
	p3 = 5;
	p4 = 2.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 1;
	p2 = 1;
	p3 = 3;
	p4 = 3.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 5;
	p2 = 1;
	p3 = 1;
	p4 = 3.4999999999999996;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 6;
	p2 = 50;
	p3 = 30;
	p4 = -1.0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 50;
	p1 = 11;
	p2 = 50;
	p3 = 50;
	p4 = 369.8865999182022;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
