#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class SRMIntermissionPhase {
public:
	int countWays(vector <int> points, vector <string> description);
};

int dp[4][303030], s[303030], S[303030];
int opt[30][303030];
int base = 1000000000 + 7;

int SRMIntermissionPhase::countWays(vector <int> points, vector <string> description) 
{
	int n = description.size(), m = points[0] + points[1] + points[2];
	memset(opt, 0, sizeof(opt));
	for (int i = 1; i <= n; i ++)
	{
		memset(dp, 0, sizeof(dp));
		//dp
		dp[0][0] = 1;
		for (int k = 0; k <= m; k ++)
			s[k] = 1;
		for (int j = 1; j <= 3; j ++)
		{
			for (int k = 0; k <= m; k ++)
			{
				if (description[i - 1][j - 1] == 'N')
				{
					dp[j][k] = dp[j - 1][k]; continue;
				}
				//1 .. points[j - 1]
				if (! k) {dp[j][k] = 0; continue; }
				int low = k - 1, up = k - min(points[j - 1], k);
				swap(low, up);
				dp[j][k] += ((s[up] - (low ? s[low - 1] : 0) + base) % base + base) % base;
				dp[j][k] += base;
				dp[j][k] %= base;
			}
			s[0] = dp[j][0];
			for (int k = 1; k <= m; k ++)
				s[k] = (s[k - 1] + dp[j][k]) % base;
		}
		//opt
		if (i == 1)
		{
			for (int k = 0; k <= m; k ++)
				opt[1][k] = dp[3][k];
		}
		else
			for (int k = 0; k <= m; k ++)
			{
				//[k + 1, m]
				opt[i][k] += (int) ((LL) (S[m] - S[k] + base) * (LL) dp[3][k] % (LL) base);
				opt[i][k] %= base;
			}
		memset(S, 0, sizeof(S));
		S[0] = opt[i][0];
		for (int k = 1; k <= m; k ++)
			S[k] = (S[k - 1] + opt[i][k]) % base;
	}
	int ans = 0;
	for (int k = 0; k <= m; k ++)
		ans += opt[n][k], ans %= base;
	return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SRMIntermissionPhase *obj;
	int answer;
	obj = new SRMIntermissionPhase();
	clock_t startTime = clock();
	answer = obj->countWays(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {25000,50000,100000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"YNN","NNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 25000;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {30000,60000,90000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NYN","NYN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 799969993;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {25000,45000,110000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NNN","YYY"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {25600,51200,102400};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"NYY","YNY","YYY","YNN","YYN","NNY","NYN","NNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 867560805;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
