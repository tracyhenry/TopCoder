#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class Egalitarianism3 {
public:
	int maxCities(int n, vector <int> a, vector <int> b, vector <int> len);
};

int f[100][100];
int u[100], lo[100], hi[100];
int n, tot;

void dfs(int x)
{
	u[x] = 1;
	lo[x] = ++ tot;
	for (int i = 0; i < n; i ++)
		if (f[i][x] < 10000 && i != x && ! u[i])
			dfs(i);
	hi[x] = ++ tot;
}

int Egalitarianism3::maxCities(int N, vector <int> a, vector <int> b, vector <int> len) 
{
	n = N;
	for (int i = 0; i < n; i ++)
		for (int j = 0; j < n; j ++)
			f[i][j] = 1000000000;
	for (int i = 0; i < n; i ++)
		f[i][i] = 0;
	for (int i = 0; i < a.size(); i ++)
		f[a[i] - 1][b[i] - 1] = f[b[i] - 1][a[i] - 1] = len[i];
	memset(u, 0, sizeof(u));
	tot = 0;
	dfs(0);
	
	for (int k = 0; k < n; k ++)
		for (int i = 0; i < n; i ++)
			for (int j = 0; j < n; j ++)
				if (k - i && k - j && i - j)
					f[i][j] = min(f[i][j], f[i][k] + f[k][j]);
	int ans = min(2, n);
	
	for (int i = 0; i < n; i ++)
	{
		map<int, int> M; M.clear();
		for (int j = 0; j < n; j ++)
			if (lo[i] <= lo[j] && hi[j] <= hi[i])
				M[f[i][j]] ++;
		for (map<int, int>::iterator it = M.begin(); it != M.end(); it ++)
		{
			int cur = it->second;
			for (int j = 0; j < n; j ++)
				if (! (lo[i] <= lo[j] && hi[j] <= hi[i]))
					if (f[i][j] == it->first)
					{
						cur ++;
						break;
					}
			ans = max(ans, cur);
			if (i == 0)
				cout << it->first << " " << it->second << " " << cur << endl;
		}
	}
	return ans;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	Egalitarianism3 *obj;
	int answer;
	obj = new Egalitarianism3();
	clock_t startTime = clock();
	answer = obj->maxCities(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 4;
	int t1[] = {1,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,3,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,1,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 6;
	int t1[] = {1,2,3,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,3,4,5,6};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2,1,3,2,3};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	int t1[] = {1,1,1,1,1,1,1,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,3,4,5,6,7,8,9,10};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1000,1000,1000,1000,1000,1000,1000,1000,1000};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 9;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1;
	p1.clear() /*{}*/;
	p2.clear() /*{}*/;
	p3.clear() /*{}*/;
	p4 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
