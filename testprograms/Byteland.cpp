#include <vector>
#include <map>
#include <stack>
#include <bitset>
#include <algorithm>
#include <utility>
#include <cmath>
#include <cstdlib>
#include <cstring>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class Byteland {
public:
	int CountDifferentMaps(int n, int k);
};

const int base = 1000000000 + 7;


pair<int, int> extend_Eulid(int a,int b)
 {
     if(b == 0)
     	return make_pair(1, 0);
     else
     {
         pair<int, int> cur = extend_Eulid(b, a % b);
         int x = cur.first, y = cur.second;
         int temp = x;
         x = y;
         y = temp - a / b * y;
         return make_pair(x, y);
     }
}

int Byteland::CountDifferentMaps(int n, int k)
{

//	C(n - 2, k - 1) / k ! * n !


	int Ans = 1;
	for (int i = 1; i <= k - 1; i ++)
		Ans = (int) ((LL) Ans * (LL) (extend_Eulid(i, base).first + base) % base % (LL) base);
	for (int i = n - 2 - (k - 1) + 1; i <= n - 2; i ++)
		Ans = (int) ((LL) Ans * (LL) i % (LL) base);
	for (int i = k + 1; i <= n; i ++)
		Ans = (int) ((LL) Ans * (LL) i % (LL) base);
	if (k == 1)
		Ans = (int) ((LL) Ans * (LL) (extend_Eulid(2, base).first + base) % (LL) base % (LL) base);
	else if (k == 2)
		Ans = (int) ((LL) Ans * (LL) (extend_Eulid(n - 2, base).first + base) % (LL) base % (LL) base);
	
	return Ans; 
}
	
	







// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	Byteland *obj;
	int answer;
	obj = new Byteland();
	clock_t startTime = clock();
	answer = obj->CountDifferentMaps(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 4;
	p2 = 5;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 6;
	p1 = 3;
	p2 = 720;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
