#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class BichromePainting {
public:
	string isThatPossible(vector <string> board, int k);
};

int u[40][40];
string BichromePainting::isThatPossible(vector <string> board, int k) 
{
	int n = board.size();
	int m = board[0].size();

	//iterations
	memset(u, 0, sizeof(u));
	while (1)
	{
		bool flag = false;
		for (int i = 0; i + k - 1 < n; i ++)
		{
			for (int j = 0; j + k - 1 < m; j ++)
			{
				bool black = false;
				bool white = false;
				for (int x = i; x < i + k; x ++)	
					for (int y = j; y < j + k; y ++)
					{
						if (u[x][y])
							continue;
						if (board[x][y] == 'B')
							black = true;
						if (board[x][y] == 'W')
							white = true;
					}
				
				if (! black && ! white)
					continue;
				if (black && white)
					continue;
				
				//got one
				flag = true;
				for (int x = i; x < i + k; x ++)
					for (int y = j; y < j + k; y ++)
						u[x][y] = 1;
				break;
			}
			if (flag)
				break;
		}
		if (not flag)
			break;
	}
/*	for (int i = 0; i < n; i ++)
	{
		for (int j = 0; j < m; j ++)
			cout << u[i][j] << " ";
		cout << endl;
	}
*/
	for (int i = 0; i < n; i ++)
		for (int j = 0; j < m; j ++)
			if (! u[i][j] && board[i][j] == 'B')
				return "Impossible";
	return "Possible";
}
				
	


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	BichromePainting *obj;
	string answer;
	obj = new BichromePainting();
	clock_t startTime = clock();
	answer = obj->isThatPossible(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"BBBW","BWWW","BWWW","WWWW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"BW","WB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"BWBWBB","WBWBBB","BWBWBB","WBWBBB","BBBBBB","BBBBBB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"BWBWBB","WBWBWB","BWBWBB","WBWBWB","BWBWBB","BBBBBB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"BWBWBB","WBWBWB","BWBWBB","WBWBWB","BWBWBB","BBBBBB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"BB","BB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
