#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class CatsOnTheLineDiv1 {
public:
	int getNumber(vector <int> position, vector <int> count, int time);
};


struct node
{
	LL pos, count;
	
	node() {}
	node(LL _pos, LL _count) : pos(_pos), count(_count) {}
	
	int operator < (const node &o) const
	{
		return pos < o.pos || pos == o.pos && count < o.count;
	}
}a[1010];

int n;
LL T;
LL opt[1010];
LL ok[1010][1010];
LL inf = 1LL << 50LL;
int suc[1010], pre[1010];

int CatsOnTheLineDiv1::getNumber(vector <int> position, vector <int> count, int time) 
{
	n = position.size();
	T = (LL) time;
	for (int i = 1; i <= n; i ++)
		a[i] = node((LL) position[i - 1], (LL) count[i - 1]);
	
	sort(a + 1, a + 1 + n);
	// pre suc
	suc[0] = 1;
	pre[n + 1] = n;
	for (int i = 1; i <= n; i ++)
	{
		suc[i] = n * 2;
		for (int j = i + 1; j <= n; j ++)
			if (a[j].pos - a[i].pos > T)
			{
				suc[i] = j;
				break;
			}
		pre[i] = 0;
		for (int j = 1; j < i; j ++)
			if (a[i].pos - a[j].pos > T)
				pre[i] = j;				
	}
	
	//make ok
	for (int i = 1; i <= n; i ++)
	{
		LL lastPos = -inf;
		for (int j = i; j <= n; j ++)
		{
			LL startLeft = max(lastPos + 1, a[j].pos - T);
			LL endRight = startLeft + a[j].count - 1;			
			if (endRight - a[j].pos > T)
			{
				for (int k = j; k <= n; k ++)
					ok[i][k] = 0;
				break;
			}
			ok[i][j] = 1;
			lastPos = endRight;
		}
	}
	
	if (ok[1][n])
		return 0;
	//dp
	for (int i = 1; i <= n; i ++)
		opt[i] = inf;
	opt[0] = 0;
	for (int i = 1; i <= n; i ++)
	{
		int pre = 0;
		for (int j = 0; j < i; j ++)
			if (a[i].pos - a[j].pos + 1 > 2 * T + 1)
				pre = j;
		for (int j = 0; j <= pre; j ++)
			if (j + 1 > pre || ok[j + 1][pre])
				opt[i] = min(opt[i], opt[j] + 1);
	}
	
	LL ans = inf;
	for (int i = 1; i <= n; i ++)
	{
//		cout << i << " : " << opt[i] << " " << ok[i + 1][n] << endl;
		if (i == n || ok[i + 1][n])
			ans = min(ans, opt[i]);
	}
	return ans;
}
	
		
		
		

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	CatsOnTheLineDiv1 *obj;
	int answer;
	obj = new CatsOnTheLineDiv1();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {4,7,47};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {4,7,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	p3 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {3,0,7,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,7,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {-5,0,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {47,85,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	p3 = 1;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {-8,12,-15,-20,17,-5,7,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {20,10,7,9,2,8,11,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 5;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
