#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class AlternativePiles {
public:
	int count(string C, int M);
};

const int base = 1000000000 + 7;
int dp[5010][52][52];

int AlternativePiles::count(string C, int M) 
{
	memset(dp, 0, sizeof(dp));
	dp[0][M][0] = 1;
	
	int N = C.size();
	
	for (int i = 0; i < N; i ++)
		for (int j = 0; j <= M; j ++)
			for (int mod = 0; mod < M; mod ++)
				if (dp[i][j][mod])
					switch (C[i])
					{
						case 'R' :
							if (j)
							{
								int &r = dp[i + 1][j - 1][mod];
								r += dp[i][j][mod];
								if (r >= base) r -= base;
							}
							break;
						case 'G' :
							if (M - j)
							{
								int &r = dp[i + 1][j + 1][(mod + 1) % M];
								r += dp[i][j][mod];
								if (r >= base) r -= base;
							}
							break;
						case 'B' :
							if (1 == 1)
							{
								int &r = dp[i + 1][j][mod];
								r += dp[i][j][mod];
								if (r >= base) r -= base;
							}
							break;
						case 'W' :
							//R
							if (j)
							{
								int &r = dp[i + 1][j - 1][mod];
								r += dp[i][j][mod];
								if (r >= base) r -= base;
							}
							//G
							if (M - j)
							{
								int &r = dp[i + 1][j + 1][(mod + 1) % M];
								r += dp[i][j][mod];
								if (r >= base) r -= base;
							}
							//B
							if (1 == 1)
							{
								int &r = dp[i + 1][j][mod];
								r += dp[i][j][mod];
								if (r >= base) r -= base;
							}										
							break;
					}
	
	return dp[N][M][0];
}
					
					

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	AlternativePiles *obj;
	int answer;
	obj = new AlternativePiles();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "WRGWWRGW";
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "RRGG";
	p1 = 1;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "BBBB";
	p1 = 5;
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW";
	p1 = 50;
	p2 = 265470435;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "WRWRGWWGWWWRWBWRWGWWRWBWWRGWBWGRGWWGWGRWGRWBRWBW";
	p1 = 7;
	p2 = 7400348;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
