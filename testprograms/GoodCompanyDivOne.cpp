#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <cstring>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class GoodCompanyDivOne {
public:
	int minimumCost(vector <int> superior, vector <int> training);
};

const int maxn = 300;
const int maxm = 200000;
const int base = 131071;
const int inf  = 1000000000;

struct node
{
    int x, next, opp, left, w;
};

int h[maxn], pre[maxn], d[maxn], q[base + 1];
int u[maxn];
node z[maxm];
int n, m, k, T, s, t, flow, o;


//for this question
int g[50][50];
int opt[50][50], minCost[50];
int N, M;
vector<int> cost;

void ins(int x, int y, int c, int w)
{
    int t1 = ++ T, t2 = ++ T;
    z[t1].x = y; z[t1].left = c; z[t1].w = w;  z[t1].next = h[x]; h[x] = t1;
    z[t2].x = x; z[t2].left = 0; z[t2].w = -w; z[t2].next = h[y]; h[y] = t2;
    z[t1].opp = t2; z[t2].opp = t1;
}

int spfa()
{
    memset(u, 0, sizeof(u));
    for (int i = s; i <= t; i ++)
        d[i] = inf;
    d[s] = 0;
    int f = 0, r = 1;
    q[1] = s;
    while (f != r)
    {
        f ++; f &= base;
        int x = q[f]; u[x] = 0;
        for (int i = h[x]; i; i = z[i].next)
            if (z[i].left)
                if (d[x] + z[i].w < d[z[i].x])
                {
                    pre[z[i].x] = i;
                    d[z[i].x] = d[x] + z[i].w;
                    if (! u[z[i].x])
                    {
                        u[z[i].x] = 1;
                        r ++; r &= base;
                        q[r] = z[i].x;
                    }
                }
    }
    return d[t] != inf;
}

void augment()
{
    int delta = 1000000;
    for (int i = t; i != s; )
    {
        int j = pre[i];
        delta = min(delta, z[j].left);
        i = z[z[j].opp].x;
    }
    flow += delta; 
    o += delta * d[t];
    for (int i = t; i != s; )
    {
        int j = pre[i];
        z[j].left -= delta;
        z[z[j].opp].left += delta;
        i = z[z[j].opp].x;
    }
}

void cleargraph(int SS, int TT)
{
    s = SS; t = TT; 
    T = flow = o = 0; 
    memset(h, 0, sizeof(h));
}

void dp(int x)
{
	vector<int> ch; ch.clear();
	for (int i = 0; i < N; i ++)
		if (g[x][i]) ch.push_back(i), dp(i);
	if (ch.size() == 0)
	{
		for (int work = 0; work < M; work ++)
			opt[x][work] = minCost[work] + cost[work];
		return ;
	}
	
	for (int work = 0; work < M; work ++)
		opt[x][work] = inf;
	for (int work = 0; work < M; work ++)
	{
		//buildgraph
		cleargraph(0, (int) ch.size() + M + 1);
		
		for (int i = 0; i < ch.size(); i ++)
			ins(s, i + 1, 1, 0);
		for (int i = 0; i < M; i ++)
			ins((int) ch.size() + i + 1, t, 1, 0);
		for (int i = 0; i < ch.size(); i ++)
			for (int j = 0; j < M; j ++)
			{
				if (j == work) continue;
				ins(i + 1, (int) ch.size() + j + 1, 1, opt[ch[i]][j]);
			}
		
		//min-cost flow
		while (spfa()) augment();
		
		if (flow == (int) ch.size())
		{
			opt[x][work] = min(opt[x][work], o + minCost[work] + cost[work]);
			for (int i = 0; i < M; i ++)
				if (i != work)
					opt[x][i] = min(opt[x][i], o + cost[i] + cost[work]);
		}
		
	}
}
		
		
int GoodCompanyDivOne::minimumCost(vector <int> superior, vector <int> training) 
{
	memset(g, 0, sizeof(g));
	for (int i = 1; i < superior.size(); i ++)
		g[superior[i]][i] = 1;
	N = superior.size();
	M = training.size();
	cost.clear();
	for (int i = 0; i < M; i ++)
		cost.push_back(training[i]);
	for (int i = 0; i < M; i ++)
	{
		minCost[i] = inf;
		for (int j = 0; j < M; j ++)
			if (j != i) minCost[i] = min(minCost[i], cost[j]);
	}
	
	dp(0);
	int ans = inf;
	for (int i = 0; i < M; i ++)
		if (opt[0][i] < ans) ans = opt[0][i];
	if (ans == inf) return -1; else return ans;
}







// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	GoodCompanyDivOne *obj;
	int answer;
	obj = new GoodCompanyDivOne();
	clock_t startTime = clock();
	answer = obj->minimumCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {-1,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 10;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {-1,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {-1,0,0,2,2,2,1,1,6,0,5,4,11,10,3,6,11,7,0,2,13,14,2,10,9,11,22,10,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {4,2,6,6,8,3,3,1,1,5,8,6,8,2,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 71;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
