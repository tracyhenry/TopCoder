#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class CircuitsConstruction {
public:
	int maximizeResistance(string circuit, vector <int> conductors);
};

vector<int> st; 

int CircuitsConstruction::maximizeResistance(string circuit, vector <int> conductors) 
{
	st.clear();
	
	for (int i = circuit.size() - 1; i >= 0; i --)
		if (circuit[i] == 'X')
			st.push_back(1);
		else if (circuit[i] == 'A')
		{
			int a = st[st.size() - 1];
			int b = st[st.size() - 2];
			st.pop_back();
			st[st.size() - 1] = a + b;
		}
		else 
		{
			int a = st[st.size() - 1];
			int b = st[st.size() - 2];
			st.pop_back();
			st[st.size() - 1] = max(a, b);
		}
	
	for (int i = 0; i < conductors.size(); i ++)
		conductors[i] *= -1;
	sort(conductors.begin(), conductors.end());
	
	int ans = 0;
	for (int i = 0; i < st[0]; i ++)
		ans = ans - conductors[i];
	return ans;
}
		


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	CircuitsConstruction *obj;
	int answer;
	obj = new CircuitsConstruction();
	clock_t startTime = clock();
	answer = obj->maximizeResistance(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "BXBXX";
	int t1[] = {8,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 8;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "AAXXAXAXX";
	int t1[] = {1,1,2,8,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 22;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "AXBXX";
	int t1[] = {8,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 11;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "BAAXBXXBXAXXBBAXXBXXAAXXX";
	int t1[] = {17,7,21,102,56,72,88,15,9,192,16,8,30};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 454;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
