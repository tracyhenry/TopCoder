#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class TheKnights {
public:
	double find(int n, int a, int b);
};

set<pair<int, int> > s;

double TheKnights::find(int n, int a, int b) 
{
	double totalArea = double(n) * double(n);
	double total = totalArea;
	total = total * (total - 1.0);
	vector<int> d; d.clear();
	d.push_back(a);
	d.push_back(-a);	
	d.push_back(b);
	d.push_back(-b);
	
	s.clear();
	for (int x1 = 0; x1 < 2; x1 ++)
		for (int y1 = 2; y1 < 4; y1 ++)
			s.insert(make_pair(d[x1], d[y1]));	

	for (int y1 = 0; y1 < 2; y1 ++)
		for (int x1 = 2; x1 < 4; x1 ++)
			s.insert(make_pair(d[x1], d[y1]));	
	//
	double ans = total * 2.0;
	for (set<pair<int, int> >::iterator i = s.begin(); i != s.end(); i ++)
	{
		double cx = i->first, cy = i->second;
		double x1 = max(1.0, 1 - cx), x2 = min((double) n, n - cx);
		double y1 = max(1.0, 1 - cy), y2 = min((double) n, n - cy);
		if (x2 < x1 || x1 < 1 || x2 > n) continue;
		if (y2 < y1 || y1 < 1 || y2 > n) continue;
		double area = (x2 - x1 + 1) * (y2 - y1 + 1);
		ans += area * (totalArea - area) * 2;
		ans += (area * (area - 1)) * 2.0;
	}
	set<pair<int, int> > v; v.clear();
	d.push_back(0);
	for (int x1 = 0; x1 < 5; x1 ++)
		for (int y1 = 0; y1 < 5; y1 ++)
			for (int x2 = 0; x2 < 5; x2 ++)
				for (int y2 = 0; y2 < 5; y2 ++)
				{
					double dx = d[x2] - d[x1];
					double dy = d[y2] - d[y1];
					if (v.count(make_pair((int) dx, (int) dy))) continue;
					v.insert(make_pair((int) dx, (int) dy));
					if (! dx && ! dy) continue;
					if (fabs(dx) > n - 1 || fabs(dy) > n - 1) continue;
					//cout << dx << " " << dy << endl;
					//calculate the total boards
					double curTotal = (n - fabs(dx)) * (n - fabs(dy));
					set<pair<int, int> > tmp; tmp.clear();
					for (set<pair<int, int> >::iterator i = s.begin(); i != s.end(); i ++)
					{
						double cx = i->first, cy = i->second;
						tmp.insert(make_pair((int) cx, (int) cy));
					}
					tmp.insert(make_pair(0, 0));
					double vv = 0;
					for (set<pair<int, int> >::iterator i = s.begin(); i != s.end(); i ++)
					{
						double cx = i->first, cy = i->second;
						if (tmp.count(make_pair((int) (dx + cx), (int) (dy + cy)))) vv ++;
					}
					if (tmp.count(make_pair((int) dx, (int) dy))) vv ++;
					ans -= curTotal * vv;
					if (vv) cout << dx << " " << dy << " " << vv << endl;
				}
	return ans / total;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	TheKnights *obj;
	double answer;
	obj = new TheKnights();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	double p3;
	
	{
	// ----- test 0 -----
	p0 = 47;
	p1 = 7;
	p2 = 74;
	p3 = 2.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
