#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;

vector<int> getSplitNumbers(string s)
{
	for (int i = 0; i < s.size(); i ++)
		if (! isdigit(s[i])) s[i] = ' ';
	vector<int> ans;
	ans.clear();
	if (! s.size()) return ans;
	for ( ; ; )
	{
		int j = s.find(" ");
		if (j == string::npos)
		{
			ans.push_back(atoi(s.c_str()));
			return ans;
		}
		int x;
		sscanf(s.c_str(), "%d", &x);
		ans.push_back(x);
		s.erase(0, j + 1);
	}
	return ans;
}
	
class NewItemShop {
public:
	double getMaximum(int swords, vector <string> customers);
};

struct node
{
	int T, swords, s;
	node() {T = 0, swords = 0, s = 0;}
	node(int T_, int swords_, int s_) : T(T_), swords(swords_), s(s_) {}
	int operator < (const node &o) const
	{
		return T < o.T || T == o.T && swords < o.swords || T == o.T && swords == o.swords && s < o.s;
	}
};

int T[100][100], C[100][100], P[100][100];
int total[100], N;
int timeC[100], timeWho[100];
double timeProb[100];
map<node, double> M;

double work(int TT, int swords, int s)
{
	node cur = node(TT, swords, s);
	if (M.count(cur)) return M[cur];
	if (TT > 23) return M[cur] = 0;
	//
	double r = 0;
	//check whether it has
	int curC = timeC[TT], who = timeWho[TT];
	double curP = timeProb[TT];
	if (curC == -1 || (s & (1 << who)))
		return M[cur] = work(TT + 1, swords, s);
	//accept
	if (swords > 0)
	{
		int ns = s;
		if (total[who] > 1) ns |= (1 << who);
		double Accept = work(TT + 1, swords - 1, ns) + curC;
		if (Accept > r) r = Accept;
	}
	//refuse
	int ns = s;
	if (total[who] > 1) ns |= (1 << who);
	double refuse = work(TT + 1, swords, ns);
	if (refuse > r) r = refuse;
	
	r *= curP;
	r += (1 - curP) * work(TT + 1, swords, s);

	return M[cur] = r;
}
		
double NewItemShop::getMaximum(int swords, vector <string> customers) 
{
	N = customers.size();
	for (int i = 0; i < 24; i ++)
		timeC[i] = timeWho[i] = -1;
	for (int i = 0; i < N; i ++)
	{
		vector<int> cur = getSplitNumbers(customers[i]);
		total[i] = cur.size() / 3;
		double tmp = 1.0;
		for (int j = 0; j < total[i]; j ++)
		{
			T[i][j] = cur[j * 3], C[i][j] = cur[j * 3 + 1], P[i][j] = cur[j * 3 + 2];
			timeC[T[i][j]] = C[i][j];
			timeWho[T[i][j]] = i;
			timeProb[T[i][j]] = double(P[i][j]) / 100.0 / tmp;
			tmp -= double(P[i][j]) / 100.0;
		}
	}
	M.clear();
	return work(0, swords, 0); 
}





// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	NewItemShop *obj;
	double answer;
	obj = new NewItemShop();
	clock_t startTime = clock();
	answer = obj->getMaximum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <string> p1;
	double p2;
	
	{
	// ----- test 0 -----
	p0 = 1;
	string t1[] = {"8,1,80 16,100,11","12,10,100"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 19.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	string t1[] = {"8,1,80 16,100,11","12,10,100"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 21.8;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	string t1[] = {"0,90,25 2,90,25 4,90,25 6,90,25","7,100,80"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 90.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 3;
	string t1[] = {"17,31,41 20,59,26 23,53,5","19,89,79","16,32,38 22,46,26","18,43,38 21,32,7"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 135.5121414;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 5;
	string t1[] = {"1,1,10","2,2,9","3,3,8","4,4,7","5,5,6","6,6,5","7,7,4","8,8,3","9,9,2","10,10,1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2.1999744634845344;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
