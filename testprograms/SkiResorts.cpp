#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class SkiResorts {
public:
	long long minCost(vector <string> road, vector <int> altitude);
};


int a[101010], u[101010];
int fa[101010], N;
vector <string> G;

int ok(int x)
{
	if (fa[x] == x) return x;
	return fa[x] = ok(fa[x]);
}

void dfs(int x)
{
	if (u[x]) return ;
	u[x] = 1;
	for (int i = 0; i < N; i ++)
		if (i - x && G[x][i] == 'Y' && a[x] >= a[i])
			dfs(i);
}

long long SkiResorts::minCost(vector <string> road, vector <int> altitude) 
{
	N = altitude.size();	
	for (int i = 0; i < N; i ++)
		a[i] = altitude[i];
	G = road;
	//check
	for (int i = 0; i < N; i ++)
		fa[i] = i;
	for (int i = 0; i < N; i ++)
		for (int j = 0; j < N; j ++)
			if (road[i][j] == 'Y')
			{
				int p = ok(i), q = ok(j);
				fa[p] = q;
			}
	for (int i = 0; i < N; i ++)
		fa[i] = ok(fa[i]);
	for (int i = 1; i < N; i ++)
		if (fa[i] != fa[0]) return -1;
	
	//iteration
	for ( ; ; )
	{
		memset(u, 0, sizeof(u));
		dfs(0);
		int total = 0;
		for (int i = 0; i < N; i ++)
			if (u[i]) total ++;
		if (total == N) break;
		
		int Min = 1 << 30, x = 0, y = 0;
		for (int i = 0; i < N; i ++)
			for (int j = i + 1; j < N; j ++)
				if ((u[i] && ! u[j]) || (u[j] && ! u[i]))
					if (fabs(a[i] - a[j]) < Min)
						Min = abs(a[i] - a[j]), x = i, y = j;
		int mid = (a[x] + a[y]) / 2;
		a[x] = a[y] = mid;
	}
	
	int ans = 0;
	for (int i = 0; i < N; i ++)
		ans += abs(altitude[i] - a[i]);
	return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	SkiResorts *obj;
	long long answer;
	obj = new SkiResorts();
	clock_t startTime = clock();
	answer = obj->minCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	long long p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"NYN","YNY","NYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {30,20,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"NY","YN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {10,20};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 10ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"NYN","YNN","NNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {573,573,573};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"NNYNNYYYNN","NNNNYNYNNN","YNNNNYYNNN","NNNNNNYNYY","NYNNNNNNYY","YNYNNNNYNN","YYYYNNNYNN","YNNNNYYNNN","NNNYYNNNNN","NNNYYNNNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {7,4,13,2,8,1,8,15,5,15};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 12ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
