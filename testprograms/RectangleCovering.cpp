#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class RectangleCovering {
public:
	int minimumNumber(int holeH, int holeW, vector <int> boardH, vector <int> boardW);
};

int RectangleCovering::minimumNumber(int holeH, int holeW, vector <int> boardH, vector <int> boardW) 
{
	int ans = -1, tmp, s;
	//H
	vector<int> a; a.clear();
	for (int i = 0; i < boardH.size(); i ++)
	{
		int h = boardH[i];
		int w = boardW[i];
		if (h <= holeH && w <= holeH)
			continue;
		
		int cur = 0;
		if (h > holeH)
			cur = max(cur, w);
		if (w > holeH)
			cur = max(cur, h);
		a.push_back(cur);
	}
	sort(a.begin(), a.end());
	reverse(a.begin(), a.end());
	s = 0; tmp = -1;
	for (int i = 0; i < a.size(); i ++)
	{
		s += a[i];
		if (s >= holeW)
		{
			tmp = i + 1;
			break;
		}
	}
	if (ans == -1 || tmp < ans)
		ans = tmp;
	//W
	a.clear();
	for (int i = 0; i < boardH.size(); i ++)
	{
		int h = boardH[i];
		int w = boardW[i];
		if (h <= holeW && w <= holeW)
			continue;
		
		int cur = 0;
		if (h > holeW)
			cur = max(cur, w);
		if (w > holeW)
			cur = max(cur, h);
		a.push_back(cur);
	}
	sort(a.begin(), a.end());
	reverse(a.begin(), a.end());
	s = 0; tmp = -1;
	for (int i = 0; i < a.size(); i ++)
	{
		s += a[i];
		if (s >= holeH)
		{
			tmp = i + 1;
			break;
		}
	}
	if ((ans == -1) || (tmp != -1 && tmp < ans))
		ans = tmp;
	
	return ans;
}






// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	RectangleCovering *obj;
	int answer;
	obj = new RectangleCovering();
	clock_t startTime = clock();
	answer = obj->minimumNumber(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <int> p2;
	vector <int> p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 5;
	int t2[] = {8,8,8};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2,3,4};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10;
	p1 = 10;
	int t2[] = {6,6,6,6};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {6,6,6,6};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = -1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 5;
	int t2[] = {5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {5};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 3;
	p1 = 5;
	int t2[] = {6};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {4};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 10000;
	p1 = 5000;
	int t2[] = {12345,12343,12323,12424,1515,6666,6789,1424,11111,25};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1442,2448,42,1818,3535,3333,3456,7890,1,52};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 3;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
