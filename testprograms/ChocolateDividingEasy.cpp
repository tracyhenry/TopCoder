#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class ChocolateDividingEasy {
public:
	int findBest(vector <string> chocolate);
};

int a[100][100], s[100][100];
int n, m;

int ChocolateDividingEasy::findBest(vector <string> chocolate) 
{
	int n = chocolate.size();
	int m = chocolate[0].size();
	
	for (int i = 0; i < n; i ++)
		for (int j = 0; j < m; j ++)
			a[i + 1][j + 1] = chocolate[i][j] - 48;
	
	memset(s, 0, sizeof(s));
	for (int i = 1; i <= n; i ++)
		for (int j = 1; j <= m; j ++)
			s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j];
	
	int ans = 0;
	for (int i = 1; i < n; i ++)
		for (int j = i + 1; j < n; j ++)
			for (int p = 1; p < m; p ++)
				for (int q = p + 1; q < m; q ++)
				{
					int Min = 1 << 30;
					for (int x = 0; x < 3; x ++)
						for (int y = 0; y < 3; y ++)
						{
							int l, r, u, d;
							if (x == 0)
								u = 1, d = i;
							else if (x == 1)
								u = i + 1, d = j;
							else 
								u = j + 1, d = n;
							
							if (y == 0)
								l = 1, r = p;
							else if (y == 1)
								l = p + 1, r = q;
							else 
								l = q + 1, r = m;
							
							Min = min(Min, s[d][r] - s[d][l - 1] - s[u - 1][r] + s[u - 1][l - 1]);
						}
					ans = max(ans, Min);
				}
	return ans;
}
							
							
							
					
					
				
				


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ChocolateDividingEasy *obj;
	int answer;
	obj = new ChocolateDividingEasy();
	clock_t startTime = clock();
	answer = obj->findBest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"9768","6767","5313"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"36753562","91270936","06261879","20237592","28973612","93194784"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 15;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"012","345","678"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
