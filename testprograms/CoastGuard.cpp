#include <vector>
#include <cstring>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long

using namespace std;


class CoastGuard {
public:
	static const int mod = 1000000000 + 7;
	static const int N = 60;

	int count(vector <int> _d, vector <int> _x, vector <int> _y)
	{
		n = _d.size();
		d.resize(n);
		x.resize(n);
		y.resize(n);
		for (int i = 0; i < n; i ++)
		{
			d[i] = _d[i];
			x[i] = _x[i];
			y[i] = _y[i];
		}	
		sort(d.begin(), d.end());
			
		memset(f, 0, sizeof(f));
		memset(u, false, sizeof(u));
		dp(0, n - 1, n, n);

		return f[0][n - 1][n][n];
	}

	void dp(int l, int r, int lo, int hi)
	{
		if (u[l][r][lo][hi])
			return ;
		u[l][r][lo][hi] = true;

		int num_cannon = r - l + 1;
		int num_ship = 0;
		int highest = -1;
		int &o = f[l][r][lo][hi];
		for (int i = 0; i < n; i ++)
			if ((lo >= n || y[i] <= y[lo]) && (hi >= n || y[i] <= y[hi]))
			{
				if (i == lo || i == hi)
					continue;
				if (l > 0 && d[l - 1] >= (d[l - 1] - x[lo]) * y[i] / y[lo] + x[i])
					continue;
				if (r < n - 1 && (d[r + 1] - x[hi]) * y[i] / y[hi] + x[i] >= d[r + 1])
					continue;
				num_ship ++;
				if (highest == -1 || y[i] > y[highest])
					highest = i;
			}

		if (num_cannon != num_ship)
			return ;

		if (num_cannon == 1)
		{
			o = 1;
			return ;
		}

		//enumerate the match of the highest
		for (int k = l; k <= r; k ++)
		{
			int num_l = 1, num_r = 1;
			if (k > l)
			{
				dp(l, k - 1, lo, highest);
				num_l = f[l][k - 1][lo][highest];
			}
			if (k < r)
			{
				dp(k + 1, r, highest, hi);
				num_r = f[k + 1][r][highest][hi];
			}
			o += (int) (((LL) num_l * (LL) num_r) % (LL) mod);
			o %= mod;
		}
	}

private:
	vector<double> d, x, y;
	int n;
	int f[N][N][N][N];
	bool u[N][N][N][N];
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	CoastGuard *obj;
	int answer;
	obj = new CoastGuard();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {-2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {10,10};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {-2,2,98,102};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,100,101};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 4;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,109,229,294,589,615,741,822,859,1000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {546,850,287,452,864,874,529,879,818,589};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {414,176,191,15,764,825,204,477,34,460};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 400;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {-1,0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,0,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
