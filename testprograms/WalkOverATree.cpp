#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class WalkOverATree {
public:
	int maxNodesVisited(vector <int> parent, int L);
};

vector<bool> visited;
vector<vector<int> > adj;
int opt[100][200][2], f[200][2];
int n, len;

const int inf = -1000000;

void dp(int x)
{
	visited[x] = true;
	
	//make leaves
	vector<int> ch;
	for (int i = 0; i < adj[x].size(); i ++)
	{
		int j = adj[x][i];
		if (! visited[j])
		{
			ch.push_back(j);
			dp(j);
		}
	}
	
	//init opt
	for (int i = 0; i <= len; i ++)
		opt[x][i][0] = opt[x][i][1] = inf;
	opt[x][0][0] = 1;

	//leaf
	if (! ch.size())
		return ;
	//dp
	for (int i = 0; i < ch.size(); i ++)
	{
		int cur_child = ch[i];
		for (int j = 0; j <= len; j ++)
		{
			f[j][0] = opt[x][j][0];
			f[j][1] = opt[x][j][1];
			
			for (int k = 1; k <= j; k ++)
			{
				if (k >= 2)
				{
					f[j][0] = max(f[j][0], opt[x][j - k][0] + opt[cur_child][k - 2][0]);
					f[j][1] = max(f[j][1], opt[x][j - k][1] + opt[cur_child][k - 2][0]);
				}
				f[j][1] = max(f[j][1], opt[x][j - k][0] + max(opt[cur_child][k - 1][0], opt[cur_child][k - 1][1]));
			}
		}

		for (int j = 0; j <= len; j ++)
			opt[x][j][0] = f[j][0], opt[x][j][1] = f[j][1];
	}
}
		
int WalkOverATree::maxNodesVisited(vector <int> parent, int L) 
{
	n = parent.size() + 1;
	adj.resize(n);
	for (int i = 0; i < n - 1; i ++)
	{
		int x = i + 1;
		int y = parent[i];
		adj[x].push_back(y);
		adj[y].push_back(x);
	}
	
	visited.clear(), visited.resize(n);
	len = L;
	dp(0);
	
	int ans = inf;
	for (int i = 0; i <= len; i ++)
		ans = max(ans, max(opt[0][i][0], opt[0][i][1]));
	return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	WalkOverATree *obj;
	int answer;
	obj = new WalkOverATree();
	clock_t startTime = clock();
	answer = obj->maxNodesVisited(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,0,0,0,2,4,2,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {0,0,1,2,3,2,3,1,3,0,1,8,6,8,0,5,15,0,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 5;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {0,0,0,1,1,3,5,1,4,5,2,2,10,5,10,10,11,13,8,3,18,15,20,20,23,8,11,26,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 26;
	p2 = 17;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {0,0,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = 5;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	int t0[] = {0,0,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 4;
	all_right = KawigiEdit_RunTest(7, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
