#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class TheGridDivOne {
public:
	int find(vector <int> x, vector <int> y, int k);
};

const int base = 100000;
const int dir[4][2] = {0, 1, 0, -1, -1, 0, 1, 0};

int tx, ty;
int dx[200], dy[200];
int barrier[200][200];
int n;
set<int> s;
map<int, int> mx, my;

//for spfa
pair<int, int> q[1010100];
int dis[200][200], u[200][200];
int f, r, ans;

int TheGridDivOne::find(vector <int> x, vector <int> y, int k) 
{
	n = x.size();
	//discretize x
	s.clear(), s.insert(0);
	mx.clear();
	tx = 0;
	for (int i = 0; i < n; i ++)
		s.insert(x[i]), s.insert(x[i] + 1), s.insert(x[i] - 1);
	for (set<int>::iterator it = s.begin(); it != s.end(); it ++)
		dx[++ tx] = (*it), mx[*it] = tx;
	
	//discretize y
	s.clear(), s.insert(0);
	my.clear();
	ty = 0;
	for (int i = 0; i < n; i ++)
		s.insert(y[i]), s.insert(y[i] + 1), s.insert(y[i] - 1);
	for (set<int>::iterator it = s.begin(); it != s.end(); it ++)
		dy[++ ty] = (*it), my[*it] = ty;
	
/*	for (int i = 1; i <= tx; i ++)
		cout << dx[i] << " ";
	cout << endl;
	for (int i = 1; i <= ty; i ++)
		cout << dy[i] << " ";
	cout << endl;
	return 0; */
	
	//initialize barrier
	memset(barrier, 0, sizeof(barrier));
	for (int i = 0; i < n; i ++)
		barrier[mx[x[i]]][my[y[i]]] = 1;
		
	//initialize queue
	f = 0, r = 1;
	q[1] = make_pair(mx[0], my[0]);
	
	//initialize dis
	for (int i = 1; i <= tx; i ++)
		for (int j = 1; j <= ty; j ++)
			dis[i][j] = k + 1;
	dis[mx[0]][my[0]] = 0;
	memset(u, 0, sizeof(u));
	ans = 0;
	while (f != r)
	{
		f = (f + 1) % base;
		int x = q[f].first;
		int y = q[f].second;
		u[x][y] = 0;
		
		//update answer
		if (dis[x][y] <= k)
		{
			int nextDis = -1;
			for (int nx = x + 1; nx <= tx; nx ++)
				if (barrier[nx][y])
				{
					nextDis = dx[nx] - dx[x] - 1;
					break;
				}
			if (nextDis == -1)
				ans = max(ans, dx[x] + k - dis[x][y]);
			else ans = max(ans, dx[x] + min(nextDis, k - dis[x][y]));
		}
		
		for (int D = 0; D < 4; D ++)
		{
			int nx = x + dir[D][0];
			int ny = y + dir[D][1];
			if (1 <= nx && nx <= tx && 1 <= ny && ny <= ty)
				if (! barrier[nx][ny])
				{
					int ndis = dis[x][y] + abs(dx[nx] - dx[x]) + abs(dy[ny] - dy[y]);
					if (ndis < dis[nx][ny])
					{
						dis[nx][ny] = ndis;
						if (! u[nx][ny])
						{
							u[nx][ny] = 1;
							r = (r + 1) % base;
							q[r] = make_pair(nx, ny);
						}
					}
				}
		}
	}
	return ans;
}
	
	
		
	


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	TheGridDivOne *obj;
	int answer;
	obj = new TheGridDivOne();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-2,-1,0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {-1,0,0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,-1,1,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9;
	p3 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0.clear() /*{}*/;
	p1.clear() /*{}*/;
	p2 = 1000;
	p3 = 1000;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,0,0,-1,-1,-2,-2,-3,-3,-4,-4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,-1,1,-2,2,-3,3,-4,4,-5,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 47;
	p3 = 31;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
