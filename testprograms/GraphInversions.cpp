#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define LL long long
#define pi 3.1415926535897932384626433 
#define sqr(a) ((a)*(a))
using namespace std;
	
class GraphInversions {
public:
	int getMinimumInversions(vector <int> A, vector <int> B, vector <int> V, int K);
};


int C[1010];
int cycle[1010];
int fa[1010];
int n, u[1010], pathLimit;
vector<int> adj[1010], val;
int ans = -1;

int ok(int x)
{
	if (fa[x] == x) return x;
	return fa[x] = ok(fa[x]);
}

void ins(int x, int val)
{
	for (int i = x; i <= 1000; i += ((i) & (-i)))
		C[i] += val;
}

int ask(int x)
{
	if (x < 1) return 0;
	int ans = 0;
	for (int i = x; i > 0; i -= ((i) & (-i)))
		ans += C[i];
	return ans;
}

void dfs1(int x, int len, int inv)
{
	u[x] = 1;
	//ins
	ins(val[x], 1);
	
	//update
	if (len >= pathLimit && (ans == -1 || inv < ans))
		ans = inv;
	
	for (int i = 0; i < adj[x].size(); i ++)
	{
		int j = adj[x][i];
		if (cycle[x] >= 0 && cycle[j] >= 0 && cycle[x] != j)
			continue;
		if (! u[j])
			dfs1(j, len + 1, inv + ask(val[j] - 1));
	}
	
	//del
	ins(val[x], -1);
}

void dfs2(int x, int len, int inv)
{
	u[x] = 1;
	//ins
	ins(val[x], 1);
	
	//update
	if (len >= pathLimit && (ans == -1 || inv < ans))
		ans = inv;
	
	for (int i = 0; i < adj[x].size(); i ++)
	{
		int j = adj[x][i];
		if (cycle[x] >= 0 && cycle[j] >= 0 && cycle[x] == j)
			continue;
		if (! u[j])
			dfs2(j, len + 1, inv + ask(val[j] - 1));
	}
	
	//del
	ins(val[x], -1);
}
	
int GraphInversions::getMinimumInversions(vector <int> A, vector <int> B, vector <int> V, int K) 
{
	n = A.size(); pathLimit = K; val = V;
	//make graph
	for (int i = 0; i < n; i ++)
		adj[i].clear();
	for (int i = 0; i < n; i ++)
	{
		adj[A[i]].push_back(B[i]);
		adj[B[i]].push_back(A[i]);
	}
	
	//make cycle
	int start;
	for (int i = 0; i < n; i ++)
		cycle[i] = -2;
	for (int i = 0; i < n; i ++)
	{
		for (int j = 0; j < n; j ++)
			fa[j] = j;
		for (int j = 0; j < n; j ++)
			if (i != j)
			{
				int p = ok(A[j]);
				int q = ok(B[j]);
				fa[p] = q;
			}
		
		for (int j = 0; j < n; j ++)
			ok(j);
		
		int diff = 0;
		for (int j = 1; j < n; j ++)
			if (fa[j] != fa[j - 1])
				diff = 1;
		if (! diff)
			cycle[A[i]] = cycle[B[i]] = -1, start = A[i];
	}
	
	for (int i = start; ; )
	{
		for (int j = 0; j < adj[i].size(); j ++)
			if (cycle[adj[i][j]] == -1)
			{
				cycle[i] = adj[i][j];
				break;
			}
		if (cycle[i] == -1)
		{
			cycle[i] = start;
			break;
		}
		i = cycle[i];
	}

	
	ans = -1;
	//DFS

	for (int i = 0; i < n; i ++)
	{
		memset(u, 0, sizeof(u));
		memset(C, 0, sizeof(C));
		dfs1(i, 1, 0);
	}

	for (int i = 0; i < n; i ++)
	{
		memset(u, 0, sizeof(u));
		memset(C, 0, sizeof(C));
		dfs2(i, 1, 0);
	}

	return ans;
}
	
		
		
		

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << p3;
	cout << "]" << endl;
	GraphInversions *obj;
	int answer;
	obj = new GraphInversions();
	clock_t startTime = clock();
	answer = obj->getMinimumInversions(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	int t0[] = {0,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {40,50,60};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 3;
	p4 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {60,40,50,30};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 3;
	p4 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,1,2,3,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,0,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {10,10,10,5,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 5;
	p4 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,1,2,3,0,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,0,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {10,2,5,3,7,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 6;
	p4 = -1;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {5,7,7,5,5,7,6,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,0,2,0,1,4,7,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {15,10,5,30,22,10,5,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 6;
	p4 = 3;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
